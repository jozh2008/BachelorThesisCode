<tool name="OTB.MultiImageSamplingRate" id="otb_multiimagesamplingrate" version="1.0.0">
  <description>Compute sampling rate for an input set of images.</description>
  <requirements>
    <requirement version="3.9" type="package">python</requirement>
  </requirements>
  <version_command><![CDATA[interpreter filename.exe --version]]></version_command>
  <command><![CDATA[$__tool_directory__/Code/openapi.py output_data_out $output_data_out  name OTB.MultiImageSamplingRate il $il
strategy.byclass.in '$strategy.byclass.in'
strategy.percent.p '$strategy.percent.p'
strategy.total.v '$strategy.total.v'
mim $mim
prefer $prefer
response $response
outputType_out $OutputSection_out.outputType_out
transmissionMode_out $OutputSection_out.transmissionMode_out]]></command>
  <inputs>
    <param name="il" type="select" optional="false" label="strategy" help="strategy">
      <option value="all">all</option>
      <option value="byclass">byclass</option>
      <option value="constant">constant</option>
      <option value="percent">percent</option>
      <option selected="true" value="smallest">smallest</option>
      <option value="total">total</option>
    </param>
    <param name="strategy.byclass.in" type="text" optional="false" label="Number of samples for all classes.In the case of the custom multi-image mode, several values can be given for each image." help="Number of samples for all classes.In the case of the custom multi-image mode, several values can be given for each image."/>
    <param name="strategy.percent.p" type="text" optional="false" label="The percentage(s) to use In the case of the custom multi-image mode, several values can be given for each image." help="The percentage(s) to use In the case of the custom multi-image mode, several values can be given for each image."/>
    <param name="strategy.total.v" type="text" optional="false" label="The number of samples to generateIn the case of the custom multi-image mode, several values can be given for each image." help="The number of samples to generateIn the case of the custom multi-image mode, several values can be given for each image."/>
    <param name="mim" type="select" optional="false" label="mim" help="mim">
      <option value="custom">custom</option>
      <option value="equal">equal</option>
      <option selected="true" value="proportional">proportional</option>
    </param>
    <param name="prefer" type="select" label="Choose the Prefer">
      <option selected="true" value="respond-async;return=representation">respond-async;return=representation</option>
      <option value="return=minimal">return=minimal</option>
      <option value="return=representation">return=representation</option>
    </param>
    <param name="response" type="select" label="Response Type" help="Choose 'raw' for raw data or 'document' for document data.">
      <option selected="true" value="document">document</option>
      <option value="raw">raw</option>
    </param>
    <section name="OutputSection_out" title="Select the appropriate transmission mode for the output format" expanded="true">
      <param name="outputType_out" type="select" label="Output filename storing sampling rates (CSV format with class name, required samples, total samples, and rate). The given filename will be used with a suffix to indicate the corresponding input index (for instance: rates.csv will give rates_1.csv, rates_2.csv, ...)." help="Output filename storing sampling rates (CSV format with class name, required samples, total samples, and rate). The given filename will be used with a suffix to indicate the corresponding input index (for instance: rates.csv will give rates_1.csv, rates_2.csv, ...).">
        <option value="text/csv">csv</option>
      </param>
      <param name="transmissionMode_out" type="select" label="Choose the transmission mode">
        <option selected="true" value="reference">reference</option>
        <option value="value">value</option>
      </param>
    </section>
  </inputs>
  <outputs>
    <data name="output_data_out" format="csv" hidden="false"/>
  </outputs>
  <tests>
    <test>
      <output name="output_data" value="txt"/>
      <param name="response" value="document"/>
    </test>
  </tests>
  <help><![CDATA[The application computes sampling rates for a set of input images. Before calling this application, each pair of image and training vectors has to be analysed with the application PolygonClassStatistics. The statistics file is then used to compute the sampling rates for each class in each image. Several types of sampling  are implemented. Each one is a combination of a mono-image strategy and a multi-image mode. The mono-image strategies are :  * smallest (default) : select the same number of sample in each class so that the smallest one is fully sampled.  * constant : select the same number of samples N in each class (with N below or equal to the size of the smallest class).  * byclass : set the required number for each class manually, with an input CSV file (first column is class name, second one is the required samples number).The multi-image modes (mim) are proportional, equal and custom. The custom mode lets the users choose the distribution of samples among the images. The different behaviours are described below. Ti(c) and Ni(c)  refers resp. to the total number and needed number of samples in image i for class c. Let's call L the total number of images.  * strategy = all    - Same behaviour for all modes : take all samples  * strategy = constant : let's call M the global number of samples required per class. For each image i and each class c:    - if mim = proportional, then Ni( c ) = M * Ti( c ) / sum_k( Tk(c) )    - if mim = equal       , then Ni( c ) = M / L    - if mim = custom      , then Ni( c ) = Mi where Mi is the custom requested number of samples for image i  * strategy = byClass : let's call M(c) the global number of samples for class c). For each image i and each class c:    - if mim = proportional, then Ni( c ) = M(c) * Ti( c ) / sum_k( Tk(c) )    - if mim = equal       , then Ni( c ) = M(c) / L    - if mim = custom      , then Ni( c ) = Mi(c) where Mi(c) is the custom requested number of samples for image i and class c  * strategy = percent : For each image i and each class c:    - if mim = proportional, then Ni( c ) = p * Ti( c ) where p is the global percentage of samples    - if mim = equal       , then Ni( c ) = p * sum_k(Tk(c)]/L where p is the global percentage of samples    - if mim = custom      , then Ni( c ) = p(i) * Ti(c) where p(i) is the percentage of samples for image i. c  * strategy = total : For each image i and each class c:    - if mim = proportional, then Ni( c ) = total * (sum_k(Ti(k))/sum_kl(Tl(k))) * (Ti(c)/sum_k(Ti(k))) where total is the total number of samples specified.    - if mim = equal       , then Ni( c ) = (total / L) * (Ti(c)/sum_k(Ti(k))) where total is the total number of samples specified.    - if mim = custom      , then Ni( c ) = total(i) * (Ti(c)/sum_k(Ti(k))) where total(i) is the total number of samples specified for image i.   * strategy = smallest class    - if mim = proportional, then the smallest class size (computed globally) is used for the strategy constant+proportional.    - if mim = equal       , then the smallest class size (computed globally) is used for the strategy constant+equal.    - if mim = custom      , then the smallest class is computed and used for each image separately.]]></help>
  <citations>
    <citation type="bibtex">Josh</citation>
  </citations>
</tool>
