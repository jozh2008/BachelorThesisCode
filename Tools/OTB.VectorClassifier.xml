<tool name="OTB.VectorClassifier" id="otb_vectorclassifier" version="1.0.0">
  <description>Performs a classification of the input vector data according to a model file.</description>
  <requirements>
    <requirement version="3.9" type="package">python</requirement>
  </requirements>
  <version_command><![CDATA[interpreter filename.exe --version]]></version_command>
  <command><![CDATA[$__tool_directory__/Code/openapi.py isArrayin False  isArrayinstat False  isArraymodel False  output_data_out $output_data_out  name OTB.VectorClassifier in $in
instat $instat
model $model
cfield '$cfield'
feat '$feat'
confmap $confmap
prefer $prefer
response $response
outputType_out $OutputSection_out.outputType_out
transmissionMode_out $OutputSection_out.transmissionMode_out]]></command>
  <inputs>
    <param name="in" type="data" optional="false" label="The input vector data file to classify." help="The input vector data file to classify. The following data types are allowed in the txt file:  zip, xml, json, vnd.google-earth.kml+xml" format="txt"/>
    <param name="instat" type="data" optional="false" label="A XML file containing mean and standard deviation to centerand reduce samples before classification, produced by ComputeImagesStatistics application." help="A XML file containing mean and standard deviation to centerand reduce samples before classification, produced by ComputeImagesStatistics application. The following data types are allowed in the txt file:  xml" format="txt"/>
    <param name="model" type="data" optional="false" label="Model file produced by TrainVectorClassifier application." help="Model file produced by TrainVectorClassifier application. The following data types are allowed in the txt file:  tiff, png, jpeg" format="txt"/>
    <param name="cfield" type="text" value="predicted" optional="false" label="Field containing the predicted class.Only geometries with this field available will be taken into account.The field is added either in the input file (if 'out' off) or in the output file.Caution, the 'cfield' must not exist in the input file if you are updating the file." help="Field containing the predicted class.Only geometries with this field available will be taken into account.The field is added either in the input file (if 'out' off) or in the output file.Caution, the 'cfield' must not exist in the input file if you are updating the file."/>
    <param name="feat" type="text" optional="false" label="List of field names in the input vector data used as features for training. Put the same field names as the TrainVectorClassifier application." help="List of field names in the input vector data used as features for training. Put the same field names as the TrainVectorClassifier application."/>
    <param name="confmap" type="select" optional="false" label="Confidence map of the produced classification. The confidence index depends on the model :   - LibSVM : difference between the two highest probabilities (needs a model with probability estimates, so that classes probabilities can be computed for each sample)  - OpenCV    * Boost : sum of votes    * DecisionTree : (not supported)    * GradientBoostedTree : (not supported)    * KNearestNeighbors : number of neighbors with the same label    * NeuralNetwork : difference between the two highest responses    * NormalBayes : (not supported)    * RandomForest : Confidence (proportion of votes for the majority class). Margin (normalized difference of the votes of the 2 majority classes) is not available for now.    * SVM : distance to margin (only works for 2-class models)." help="Confidence map of the produced classification. The confidence index depends on the model :   - LibSVM : difference between the two highest probabilities (needs a model with probability estimates, so that classes probabilities can be computed for each sample)  - OpenCV    * Boost : sum of votes    * DecisionTree : (not supported)    * GradientBoostedTree : (not supported)    * KNearestNeighbors : number of neighbors with the same label    * NeuralNetwork : difference between the two highest responses    * NormalBayes : (not supported)    * RandomForest : Confidence (proportion of votes for the majority class). Margin (normalized difference of the votes of the 2 majority classes) is not available for now.    * SVM : distance to margin (only works for 2-class models).">
      <option selected="true" value="false">false</option>
      <option value="true">true</option>
    </param>
    <param name="prefer" type="select" label="Choose the Prefer">
      <option selected="true" value="respond-async;return=representation">respond-async;return=representation</option>
      <option value="return=minimal">return=minimal</option>
      <option value="return=representation">return=representation</option>
    </param>
    <param name="response" type="select" label="Response Type" help="Choose 'raw' for raw data or 'document' for document data.">
      <option selected="true" value="document">document</option>
      <option value="raw">raw</option>
    </param>
    <section name="OutputSection_out" title="Select the appropriate transmission mode for the output format" expanded="true">
      <param name="outputType_out" type="select" label="Author did not provide help for this parameter... ">
        <option value="application/json">json</option>
        <option value="application/vnd.google-earth.kml+xml">vnd.google-earth.kml+xml</option>
        <option value="application/zip">zip</option>
        <option value="text/xml">xml</option>
      </param>
      <param name="transmissionMode_out" type="select" label="Choose the transmission mode">
        <option selected="true" value="reference">reference</option>
        <option value="value">value</option>
      </param>
    </section>
  </inputs>
  <outputs>
    <data name="output_data_out" format="xml" hidden="false">
      <change_format>
        <when input="response" format="txt" value="document"/>
        <when input="outputType_out" format="vnd.google-earth.kml+xml" value="application/vnd.google-earth.kml+xml"/>
        <when input="outputType_out" format="json" value="application/json"/>
        <when input="outputType_out" format="zip" value="application/zip"/>
      </change_format>
    </data>
  </outputs>
  <tests>
    <test>
      <output name="output_data" value="txt"/>
      <param name="response" value="document"/>
    </test>
  </tests>
  <help><![CDATA[This application performs a vector data classification based on a model file produced by the TrainVectorClassifier application.Features of the vector data output will contain the class labels decided by the classifier (maximal class label = 65535). There are two modes: 1) Update mode: add of the 'cfield' field containing the predicted class in the input file. 2) Write mode: copies the existing fields of the input file in the output file  and add the 'cfield' field containing the predicted class. If you have declared the output file, the write mode applies. Otherwise, the input file update mode will be applied.]]></help>
  <citations>
    <citation type="bibtex">Josh</citation>
  </citations>
</tool>
